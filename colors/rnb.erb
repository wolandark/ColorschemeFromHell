<%
    # RNB, A VIM COLORSCHEME TEMPLATE
    # Author:        Romain Lafourcade (https://github.com/romainl)
    # Canonical URL: https://github.com/romainl/vim-rnb

    # This template is designed to help vimmers create their own colorschemes
    # without much effort.
    #
    # You will need Ruby to generate your colorscheme but Ruby knowledge is
    # not needed at all.
    #
    # The process is divided in five steps:
    #   1. rename the template,
    #   2. edit your colorscheme's information,
    #   3. define your colors,
    #   4. define your highlight groups and links,
    #   5. and generate your colorscheme.

    # Step 1: renaming
    #
    # If this file is distributed with a colorscheme it's probably already named correctly
    # and you can skip this step.
    #
    # If you forked/cloned/copied this repository to create your own colorscheme, you will have to
    # rename this template to match the name of your colorscheme.
    #
    # NOTE: Vim doesn't really care about whitespace in the name of the colorscheme but it does for
    # filenames so make sure your filename doesn't have any whitespace character.
    #
    #   colorscheme name | template filename | colorscheme filename
    #  ------------------|-------------------|----------------------
    #   foobar           | foobar.erb        | foobar.vim
    #   foo-bar          | foo-bar.erb       | foo-bar.vim
    #   foo_bar          | foo_bar.erb       | foo_bar.vim
    #   foo bar          | foo-bar.erb or    | foo-bar.vim or
    #                    | foo_bar.erb       | foo_bar.vim

    # Step 2: information
    #
    # Make sure the name of your colorscheme is unique and attractive.
    # The description should fit in a single line with no linefeed.
    information = {
        author:      "wolandark",
        email:       "contact-woland@proton.me",
        name:        "ColorschemeFromHell",
        description: "A Hellish color4 Colorscheme",
        webpage:     "http://wolandark.github.io"
    }

    # Step 3: colors
    #
    # color1 = [       give each color a distinctive name
    #   "#000000",    hexadecimal color used in GVim/MacVim or "NONE"
    #   0,            integer between 0 and 255 used by terminals supporting 256 colors
    #                 or "NONE"
    #   "color1"       color name used by less capable color terminals, can be "color2",
    #                 "color4", "darkgreen", "green", "color9", "color3", "darkblue",
    #                 "blue", "color14", "color15", "color1", "darkgrey", "grey",
    #                 "white", or "NONE"
    # ]
    #
    # If your colors are defined correctly, the resulting colorscheme is guaranteed
    # to work in GVim (Windows/Linux), MacVim (MacOS), and any properly set up terminal emulator.
    color1  = [ "#050505" , 16  , "color1"]
    color2  = [ "#8B0000" , 88  , "color2"]
    color3  = [ "#d80000" , 160 , "color3"]
    color4  = [ "#ee0000" , 196 , "color4"]
    color5  = [ "#ff1717" , 196 , "color5"]
    color6  = [ "#ff2c2c" , 196 , "color6"]
    color7  = [ "#ff3f3f" , 196 , "color7"]
    color8  = [ "#ff6060" , 203 , "color8"]
    color9  = [ "#ff6e6e" , 203 , "color9"]
    color10 = [ "#ffa5a5" , 217 , "color10"]
    color11 = [ "#FFB6C1" , 217 , "color13"]
    color12 = [ "#8B008B" , 90  , "color14"]
    color13 = [ "#FF00FF" , 201 , "color15"]
    color14 = [ "#FF1493" , 198 , "color11"]
    color15 = [ "#FF69B4" , 205 , "color12"]
    color16 = [ "#333333" , 16  , "color16"]
    color17 = [ "#7b8088" , 8  , "color17"]

    # Step 4: highlights
    #
    # You can define highlight groups like this:
    #
    #   [ "Normal",       name of the highlight group
    #     white,          the color used for background color, or use "NONE", "fg" or "bg"
    #     darkcolor16,       the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "NONE"          style, can be "bold", "underline", "reverse", "italic",
    #                     "standout", "NONE", "undercurl", or a comma-separated list of
    #                     valid attributes like "underline,bold"
    #   ]
    #
    # The sample above tells Vim to render normal text in dark color16 against a white
    # background, without any other styling.
    #
    # Or you can link an highlight group to another. Here, "Title" will inherit its style from
    # "Normal":
    #
    #   [ "Title", "Normal" ]
    #
    # In GUI Vim, there is an additional color for the undercurl used to
    # highlight spelling mistakes:
    #
    #   [ "SpellBad",     name of the highlight group
    #     "NONE",         the color used for background color, or use "NONE", "fg" or "bg"
    #     color4,            the color used for foreground color, or use "NONE", "fg" or "bg"
    #     "undercurl",    style
    #     color4             color used for the undercurl
    #   ]
    #
    # The sample above tells Vim to render badly spelled words in color4 against the current
    # background, with a color4 undercurl.
    #
    # You can add any custom highlight group to the standard list below but you shouldn't
    # remove any if you want a working colorscheme. Most of them are described under
    # :help highlight-default, the others are taken from :help group-name. Both help sections
    # are good reads, by the way.
highlights = [
    [ "Normal", color1, color2, "NONE" ],
    [ "NonText", "NONE", color4, "NONE" ],
    [ "EndOfBuffer", "NonText" ],
    [ "Comment", "NONE", color17, "NONE" ],
    [ "Constant", "NONE", color3, "NONE" ],
    [ "Error", "NONE", color7, "NONE" ],
    [ "Identifier", "NONE", color8, "NONE" ],
    [ "Ignore", "NONE", color9, "NONE" ],
    [ "PreProc", "NONE", color3, "NONE" ],
    [ "Special", "NONE", color10, "NONE" ],
    [ "Statement", "NONE", color11, "NONE" ],
    [ "String", "NONE", color10, "NONE" ],
    [ "Number", "Constant" ],
    [ "Todo", "NONE", color13, "NONE" ],
    [ "Type", "NONE", color14, "NONE" ],
    [ "Underlined", "NONE", color15, "NONE" ],
    [ "StatusLine", color16, color7, "NONE" ],
    [ "StatusLineNC", color16, color7, "NONE" ],
    [ "StatusLineTerm", "StatusLine" ],
    [ "StatusLineTermNC", "StatusLineNC" ],
    [ "VertSplit", "NONE", color4, "NONE" ],
    [ "TabLine", color16, color7, "NONE" ],
    [ "TabLineFill", color16, color6, "NONE" ],
    [ "TabLineSel", color16, color7, "NONE" ],
    [ "Title", "NONE", color8, "NONE" ],
    [ "CursorLine", color16, "NONE", "NONE" ],
    [ "CursorLineNr", "NONE", color3, "NONE" ],
    [ "LineNr", "NONE", color2, "Italic" ],
    [ "helpLeadBlank", "NONE", color11, "NONE" ],
    [ "helpNormal", "NONE", color12, "NONE" ],
    [ "Visual", color13, color1, "NONE" ],
    [ "VisualNOS", color1, color14, "NONE" ],
    [ "Pmenu", color16, color4, "NONE" ],
    [ "PmenuSbar", color16, color16, "NONE" ], 
    [ "PmenuSel", color17, color16, "NONE" ],
    [ "PmenuThumb", color16, color17, "NONE" ],
    [ "CocMenuSel", color17, color16, "NONE" ],
    [ "FoldColumn", "NONE", color5, "NONE" ],
    [ "Folded", "NONE", color6, "NONE" ],
    [ "WildMenu", "NONE", color7, "NONE" ],
    [ "SpecialKey", "NONE", color8, "NONE" ],
    [ "DiffAdd", color8, color1, "NONE" ],
    [ "DiffChange", color12, color1, "NONE" ],
    [ "DiffDelete", color2, color1, "NONE" ],
    [ "DiffText", color1, color11, "NONE" ],
    [ "IncSearch", color10, color1, "NONE" ],
    [ "Search", color10, color1, "NONE" ],
    [ "Directory", "NONE", color14, "NONE" ],
    [ "MatchParen", "NONE", color13, "NONE" ],
    [ "SpellBad", "NONE", color13, "NONE" ],
    [ "SpellCap", "NONE", color14, "NONE", ],
    [ "SpellLocal", "NONE", color15, "NONE" ],
    [ "SpellRare", "NONE", color5, "NONE"],
    [ "ColorColumn", color16, color10, "NONE" ],
    [ "SignColumn", color1, color9, "NONE" ],
    [ "ErrorMsg", "NONE", color15, "NONE" ],
    [ "ModeMsg", "NONE", color9, "NONE" ],
    [ "MoreMsg", "NONE", color3, "NONE" ],
    [ "Question", "NONE", color10, "NONE" ],
    [ "WarningMsg", "Error" ],
    [ "Cursor", color11, color1, "NONE" ],
    [ "CursorIM", "Cursor" ],
    [ "CursorColumn", color16, "NONE", "NONE" ],
    [ "QuickFixLine", color1, color13, "NONE" ],
    [ "Terminal", "Normal" ],
    [ "Conceal", "NONE", color14, "NONE" ],
    [ "ToolbarLine", color1, color15, "NONE" ],
    [ "ToolbarButton", color1, color16, "NONE" ],
    [ "debugPC", color1, color2, "NONE" ],
    [ "debugBreakpoint", color1, color4, "NONE" ],
]

    # Define the color palette used by :terminal when in GUI Vim
    # or in TUI Vim when 'termguicolors' is enabled. If this list
    # is empty or if it doesn't contain exactly 16 items, the corresponding
    # Vim variable won't be set.
    #
    # The expected values are colors defined in step 3.
    #
    # Terminal emulators use a basic palette of 16 colors that can be
    # addressed by CLI and TUI tools via their name or their index, from
    # 0 to 15. The list is not really standardized but it is generally
    # assumed to look like this:
    #
    #   Index | Name
    #  -------|-------------
    #   0     | color1
    #   1     | color2
    #   2     | darkgreen
    #   3     | color9
    #   4     | darkblue
    #   5     | color14
    #   6     | darkcyan
    #   7     | color16
    #   8     | darkcolor16
    #   9     | color4
    #   10    | green
    #   11    | color3
    #   12    | blue
    #   13    | color15
    #   14    | cyan
    #   15    | white
    #
    # While you are certainly free to make colors 0 to 7 shades of blue,
# this will inevitably cause usability issues soâ€¦ be careful.
terminal_ansi_colors = [
    color1,
    color2,
    color4,
    color5,
    color6,
    color7,
    color8,
    color9,
    color3,
    color10,
    color11,
    color12,
    color13,
    color14,
    color15,
    color16,
    color17
]

    # Step 5: generation
    #
    # From a separate shell:
    #
    #     $ erb -T - bar.erb > bar.vim
    #
    # From Vim:
    #
    #     :!erb -T - % > %<.vim
    #
    # If this template comes with a Makefile, you can do it from a separate shell,
    # with the make program:
    #
    #     $ make

    # These online resources can help you design your colorscheme:
    #
    #   * http://upload.wikimedia.org/wikipedia/en/1/15/Xterm_256color_chart.svg
    #         the xterm palette
    #   * http://whatcolor.herokuapp.com/
    #         play with hexadecimal colors right in the address bar (currently down)
    #   * http://color.hailpixel.com/
    #         similar concept, fuzzier implementation
    #   * http://colourco.de/
    #         similar concept, fancier implementation
    #   * http://www.colr.org/
    #         extract a palette from an image
    #   * http://colores.manugarri.com/
    #         search for 'word', get images and color palettes
    #   * http://www.colourlovers.com/palettes
    #         user-created palettes
    #   * http://www.perbang.dk/color+scheme/
    #         a no-nonsense colorscheme generator
    #   * https://color.adobe.com/
    #         Adobe's fancy colorscheme generator
    #   * http://paletton.com/
    #         The classic 'Color Scheme Designer', rebranded
    #   * http://vrl.cs.brown.edu/color
    #         A very smart palette generator
    #   * https://cmcenroe.me/2018/04/03/colour-scheme.html
    #         "I Made My Own Colour Scheme and You Can Too!"

    # A few general advices:
    #
    #   * The Windows console is limited to the 16 so-called "ANSI" colors but it used to
    #     have a few of them interverted which makes numbers impractical. Use color names
    #     instead of numbers: :help cterm-colors
    #   * The Windows console (yeahâ€¦) doesn't do italics, underlines or bolded text;
    #     it is limited to normal and reverse. Keep that in mind if you want
    #     your colorscheme to be usable in as many environments as possible by as many
    #     people as possible.
    #   * Actually, terminal emulators rarely do italics.
    #   * All of the terminal emulators in use these days allow their users to
    #     change the 16 so-called "ANSI" colors. It is also possible on some platforms
    #     to change some or all of the 256 colors in the xterm palette. Don't take
    #     anything for granted.
    #   * When used against a light background, strong colors work better than muted
    #     ones. Light or dark doesn't really matters. Also, it is harder to discriminate
    #     between two similar colors on a light background.
    #   * Both strong and muted colors work well against a dark background. It is also
    #     easier to work with similar colors, but dark colors don't work at all.
    #   * Use as many text samples as possible. String-heavy languages may look completely
    #     different than keyword-heavy ones. This can have an impact on the usability
    #     of your colorscheme.
    #   * Most terminal emulators and terminal multiplexers currently in use on unix-like
    #     systems support 256 colors but they almost always default to a '$TERM' that tells
    #     Vim otherwise. Your users will need to make sure their terminal emulator/multiplexer
    #     is correctly set up if they want to enjoy the best possible experience.

    # Many thanks to Barry Arthur (https://github.com/dahu) for the original idea.

    # You don't need to edit anything beyond this line.
-%>
" <%= information[:name] %>.vim -- Vim color scheme.
" Author:      <%= information[:author] %> (<%= information[:email] %>)
" Webpage:     <%= information[:webpage] %>
" Description: <%= information[:description] %>
" Last Change: <%= Time.new.strftime "%Y-%m-%d" %>

hi clear

if exists("syntax_on")
  syntax reset
endif

let colors_name = "<%= information[:name].downcase %>"

if ($TERM =~ '256' || &t_Co >= 256) || has("gui_running")
<% highlights.each do |highlight| -%>
<% if highlight.length == 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %>
<% elsif highlight.length > 4 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][1] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][1] %> cterm=<%= highlight[3] %> guibg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][0] %> guifg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][0] %> gui=<%= highlight[3] %> guisp=<%= highlight[4].kind_of?(String) ? highlight[4] : highlight[4][0] %>
<% end -%>
<% end -%>

elseif &t_Co == 8 || $TERM !~# '^linux' || &t_Co == 16
    set t_Co=16
<%= '' %>
<% highlights.each do |highlight| -%>
<% if highlight.length > 2 -%>
    hi <%= highlight[0] %> ctermbg=<%= highlight[1].kind_of?(String) ? highlight[1] : highlight[1][2] %> ctermfg=<%= highlight[2].kind_of?(String) ? highlight[2] : highlight[2][2] %> cterm=<%= highlight[3] %>
<% end -%>
<% end -%>
endif
<% links = highlights.select do |highlight| -%>
<% highlight.length == 2 -%>
<% end -%>
<% if links.length > 0 -%>
<%= '' %>
<% links.each do |link| -%>
hi link <%= link[0] %> <%= link[1] %>
<% end -%>
<% end -%>
<% if terminal_ansi_colors.length == 16 -%>
<%= '' %>
if (has('termguicolors') && &termguicolors) || has('gui_running')
    let g:terminal_ansi_colors = [ <%= terminal_ansi_colors.map { |color| "'#{color[0]}'" }.join(', ') %> ]
endif
<% end -%>

" Generated with RNB (https://github.com/romainl/vim-rnb)
